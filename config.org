#+title: Raynei's emacs recipe
#+author: Raynei
#+property: header-args:emacs-lisp :tangle ./config.el

* UI changes
** Minimal UI
GUI emacs thankfully has a full fledge UI to help beginners, but my zoomer eyes can't stand the 2005 design.
So I'll just disable all the menu bars and scroll bars since they're unnecessary once you know your way.
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
#+end_src
** Fonts
As an emacs hacker, I only use the coolest l33t hacker font.
#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "Hack" :height 140)
(set-face-attribute 'variable-pitch nil :family "FreeSerif" :height 140)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "C-=") 'text-scale-increase)
#+end_src
* Rest
#+begin_src emacs-lisp
(eval-and-compile
  (customize-set-variable
   'package-archives '(("melpa" . "https://melpa.org/packages/")
                       ("gnu" . "https://elpa.gnu.org/packages/")
                       ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
  (package-initialize)
  (unless (package-installed-p 'leaf)
    (package-refresh-contents)
    (package-install 'leaf))

  (leaf leaf-keywords
    :ensure t
    :config
    ;; initialize leaf-keywords.el
    (leaf-keywords-init)))
;; Taken from readme

(leaf modern-cpp-font-lock

  :ensure t
  :hook (c++-mode-hook))

(leaf nim-mode
  :ensure t)

(add-to-list 'load-path "~/.config/emacs/packages/")
(load-file "~/.config/emacs/packages/hare-mode/hare-mode.el")

(leaf corfu
  :ensure t
  :custom ((corfu-cycle . t)
          (corfu-auto . t)
          (corfu-preselect . 'prompt)
          (corfu-quit-no-match . 'separator))
  :init (global-corfu-mode))

(leaf cape
  :ensure t
  :init
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-keyword))
(setq-local completion-at-point-functions
    	(mapcar #'cape-company-to-capf
		(list #'company-etags)))

(leaf ctrlf
  :ensure t
  :init (ctrlf-mode))

(leaf vertico
  :ensure t
  :init (vertico-mode))

(leaf marginalia
  :ensure t
  :init (marginalia-mode))

(leaf orderless
  :ensure t
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

(leaf consult
  :ensure t
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init (setq xref-show-xrefs-function #'consult-xref
    	  xref-show-definitions-function #'consult-xref)
  :bind
  ([remap switch-to-buffer] . consult-buffer)
  ([remap goto-line] . consult-goto-line)
  ([remap man] . consult-man)
  )

(leaf helpful
  :ensure t
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . helpful-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-key] . helpful-key))

(leaf magit
  :ensure t
  :config
  (setq transient-default-level 5))

(leaf eat
  :ensure t)

(leaf org-journal
  :ensure t)
(leaf ox-pandoc
  :ensure t)
(leaf pdf-tools
  :ensure t)
(setq
 org-auto-align-tags nil
 org-tags-column 0
 org-catch-invisible-edits 'show-and-error
 org-insert-heading-respect-content t
 org-hide-emphasis-markers t
 org-pretty-entities t
)

(load-file "~/.config/emacs/private.el")
(leaf circe)
(setq circe-network-options
      '(("Libera Chat"
         :tls t
         :nick "raynei"
         :sasl-username "raynei"
         :sasl-password libera-password
         :channels ("#emacs")
         )))

(require 'mu4e)
(setq user-mail-address "emacs.raynei@gmail.com")
(setq mu4e-get-mail-command "mbsync gmail")
(setq
 mu4e-sent-folder "/Gmail/[gmail].sent"
 mu4e-drafts-folder "/Gmail/[gmail].drafts"
 mu4e-trash-folder "/Gmail/[gmail].trash"
 mu4e-refile-folder "/Gmail/[gmail].important"
 mu4e-get-mail-command "offlineimap"
 mu4e-update-interval 1200
)

;; Dictionary buffer should behave
(setq switch-to-buffer-obey-display-actions t)
(add-to-list 'display-buffer-alist
 '("^\\*Dictionary\\*" display-buffer-in-side-window
   (side . bottom)
   (window-width . 50)))

(electric-pair-mode)
#+end_src
